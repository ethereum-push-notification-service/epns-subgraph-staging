// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Admin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Admin entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Admin entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Admin", id.toString(), this);
  }

  static load(id: string): Admin | null {
    return store.get("Admin", id) as Admin | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get previousAdmin(): Bytes {
    let value = this.get("previousAdmin");
    return value.toBytes();
  }

  set previousAdmin(value: Bytes) {
    this.set("previousAdmin", Value.fromBytes(value));
  }

  get newAdmin(): Bytes {
    let value = this.get("newAdmin");
    return value.toBytes();
  }

  set newAdmin(value: Bytes) {
    this.set("newAdmin", Value.fromBytes(value));
  }
}

export class Upgrade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Upgrade entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Upgrade entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Upgrade", id.toString(), this);
  }

  static load(id: string): Upgrade | null {
    return store.get("Upgrade", id) as Upgrade | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get channel(): Bytes {
    let value = this.get("channel");
    return value.toBytes();
  }

  set channel(value: Bytes) {
    this.set("channel", Value.fromBytes(value));
  }

  get subscribed(): boolean {
    let value = this.get("subscribed");
    return value.toBoolean();
  }

  set subscribed(value: boolean) {
    this.set("subscribed", Value.fromBoolean(value));
  }
}

export class Channel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Channel entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Channel entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Channel", id.toString(), this);
  }

  static load(id: string): Channel | null {
    return store.get("Channel", id) as Channel | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get info(): string | null {
    let value = this.get("info");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set info(value: string | null) {
    if (value === null) {
      this.unset("info");
    } else {
      this.set("info", Value.fromString(value as string));
    }
  }

  get url(): string | null {
    let value = this.get("url");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set url(value: string | null) {
    if (value === null) {
      this.unset("url");
    } else {
      this.set("url", Value.fromString(value as string));
    }
  }

  get icon(): string | null {
    let value = this.get("icon");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set icon(value: string | null) {
    if (value === null) {
      this.unset("icon");
    } else {
      this.set("icon", Value.fromString(value as string));
    }
  }

  get subscribedCount(): BigInt {
    let value = this.get("subscribedCount");
    return value.toBigInt();
  }

  set subscribedCount(value: BigInt) {
    this.set("subscribedCount", Value.fromBigInt(value));
  }

  get unsubscribedCount(): BigInt {
    let value = this.get("unsubscribedCount");
    return value.toBigInt();
  }

  set unsubscribedCount(value: BigInt) {
    this.set("unsubscribedCount", Value.fromBigInt(value));
  }

  get userCount(): BigInt {
    let value = this.get("userCount");
    return value.toBigInt();
  }

  set userCount(value: BigInt) {
    this.set("userCount", Value.fromBigInt(value));
  }

  get notificationCount(): BigInt {
    let value = this.get("notificationCount");
    return value.toBigInt();
  }

  set notificationCount(value: BigInt) {
    this.set("notificationCount", Value.fromBigInt(value));
  }

  get activated(): boolean {
    let value = this.get("activated");
    return value.toBoolean();
  }

  set activated(value: boolean) {
    this.set("activated", Value.fromBoolean(value));
  }

  get type(): BigInt | null {
    let value = this.get("type");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set type(value: BigInt | null) {
    if (value === null) {
      this.unset("type");
    } else {
      this.set("type", Value.fromBigInt(value as BigInt));
    }
  }

  get deactivated(): boolean {
    let value = this.get("deactivated");
    return value.toBoolean();
  }

  set deactivated(value: boolean) {
    this.set("deactivated", Value.fromBoolean(value));
  }

  get poolContribution(): BigInt | null {
    let value = this.get("poolContribution");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set poolContribution(value: BigInt | null) {
    if (value === null) {
      this.unset("poolContribution");
    } else {
      this.set("poolContribution", Value.fromBigInt(value as BigInt));
    }
  }

  get memberCount(): BigInt | null {
    let value = this.get("memberCount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set memberCount(value: BigInt | null) {
    if (value === null) {
      this.unset("memberCount");
    } else {
      this.set("memberCount", Value.fromBigInt(value as BigInt));
    }
  }

  get historicalZ(): BigInt | null {
    let value = this.get("historicalZ");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set historicalZ(value: BigInt | null) {
    if (value === null) {
      this.unset("historicalZ");
    } else {
      this.set("historicalZ", Value.fromBigInt(value as BigInt));
    }
  }

  get fairShareCount(): BigInt | null {
    let value = this.get("fairShareCount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fairShareCount(value: BigInt | null) {
    if (value === null) {
      this.unset("fairShareCount");
    } else {
      this.set("fairShareCount", Value.fromBigInt(value as BigInt));
    }
  }

  get lastUpdateBlock(): BigInt | null {
    let value = this.get("lastUpdateBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdateBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("lastUpdateBlock");
    } else {
      this.set("lastUpdateBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get startBlock(): BigInt | null {
    let value = this.get("startBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("startBlock");
    } else {
      this.set("startBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get updateBlock(): BigInt | null {
    let value = this.get("updateBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updateBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("updateBlock");
    } else {
      this.set("updateBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get weight(): BigInt | null {
    let value = this.get("weight");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set weight(value: BigInt | null) {
    if (value === null) {
      this.unset("weight");
    } else {
      this.set("weight", Value.fromBigInt(value as BigInt));
    }
  }

  get indexTimestamp(): BigInt | null {
    let value = this.get("indexTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set indexTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("indexTimestamp");
    } else {
      this.set("indexTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get indexBlock(): BigInt | null {
    let value = this.get("indexBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set indexBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("indexBlock");
    } else {
      this.set("indexBlock", Value.fromBigInt(value as BigInt));
    }
  }
}

export class EPNS extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EPNS entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EPNS entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EPNS", id.toString(), this);
  }

  static load(id: string): EPNS | null {
    return store.get("EPNS", id) as EPNS | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get channelCount(): i32 {
    let value = this.get("channelCount");
    return value.toI32();
  }

  set channelCount(value: i32) {
    this.set("channelCount", Value.fromI32(value));
  }

  get userCount(): i32 {
    let value = this.get("userCount");
    return value.toI32();
  }

  set userCount(value: i32) {
    this.set("userCount", Value.fromI32(value));
  }

  get notificationCount(): i32 {
    let value = this.get("notificationCount");
    return value.toI32();
  }

  set notificationCount(value: i32) {
    this.set("notificationCount", Value.fromI32(value));
  }
}

export class Notification extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Notification entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Notification entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Notification", id.toString(), this);
  }

  static load(id: string): Notification | null {
    return store.get("Notification", id) as Notification | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get channelAddress(): Bytes {
    let value = this.get("channelAddress");
    return value.toBytes();
  }

  set channelAddress(value: Bytes) {
    this.set("channelAddress", Value.fromBytes(value));
  }

  get notificationTitle(): string | null {
    let value = this.get("notificationTitle");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set notificationTitle(value: string | null) {
    if (value === null) {
      this.unset("notificationTitle");
    } else {
      this.set("notificationTitle", Value.fromString(value as string));
    }
  }

  get notificationBody(): string | null {
    let value = this.get("notificationBody");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set notificationBody(value: string | null) {
    if (value === null) {
      this.unset("notificationBody");
    } else {
      this.set("notificationBody", Value.fromString(value as string));
    }
  }

  get dataType(): string | null {
    let value = this.get("dataType");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dataType(value: string | null) {
    if (value === null) {
      this.unset("dataType");
    } else {
      this.set("dataType", Value.fromString(value as string));
    }
  }

  get dataSecret(): string | null {
    let value = this.get("dataSecret");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dataSecret(value: string | null) {
    if (value === null) {
      this.unset("dataSecret");
    } else {
      this.set("dataSecret", Value.fromString(value as string));
    }
  }

  get dataASub(): string | null {
    let value = this.get("dataASub");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dataASub(value: string | null) {
    if (value === null) {
      this.unset("dataASub");
    } else {
      this.set("dataASub", Value.fromString(value as string));
    }
  }

  get dataAMsg(): string | null {
    let value = this.get("dataAMsg");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dataAMsg(value: string | null) {
    if (value === null) {
      this.unset("dataAMsg");
    } else {
      this.set("dataAMsg", Value.fromString(value as string));
    }
  }

  get dataACta(): string | null {
    let value = this.get("dataACta");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dataACta(value: string | null) {
    if (value === null) {
      this.unset("dataACta");
    } else {
      this.set("dataACta", Value.fromString(value as string));
    }
  }

  get dataAImg(): string | null {
    let value = this.get("dataAImg");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dataAImg(value: string | null) {
    if (value === null) {
      this.unset("dataAImg");
    } else {
      this.set("dataAImg", Value.fromString(value as string));
    }
  }

  get dataATime(): string | null {
    let value = this.get("dataATime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dataATime(value: string | null) {
    if (value === null) {
      this.unset("dataATime");
    } else {
      this.set("dataATime", Value.fromString(value as string));
    }
  }

  get indexTimestamp(): BigInt {
    let value = this.get("indexTimestamp");
    return value.toBigInt();
  }

  set indexTimestamp(value: BigInt) {
    this.set("indexTimestamp", Value.fromBigInt(value));
  }

  get indexBlock(): BigInt {
    let value = this.get("indexBlock");
    return value.toBigInt();
  }

  set indexBlock(value: BigInt) {
    this.set("indexBlock", Value.fromBigInt(value));
  }
}

export class SubscriptionState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SubscriptionState entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SubscriptionState entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SubscriptionState", id.toString(), this);
  }

  static load(id: string): SubscriptionState | null {
    return store.get("SubscriptionState", id) as SubscriptionState | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get channelAddress(): Bytes {
    let value = this.get("channelAddress");
    return value.toBytes();
  }

  set channelAddress(value: Bytes) {
    this.set("channelAddress", Value.fromBytes(value));
  }

  get subscribed(): boolean {
    let value = this.get("subscribed");
    return value.toBoolean();
  }

  set subscribed(value: boolean) {
    this.set("subscribed", Value.fromBoolean(value));
  }

  get indexTimestamp(): BigInt {
    let value = this.get("indexTimestamp");
    return value.toBigInt();
  }

  set indexTimestamp(value: BigInt) {
    this.set("indexTimestamp", Value.fromBigInt(value));
  }

  get indexBlock(): BigInt {
    let value = this.get("indexBlock");
    return value.toBigInt();
  }

  set indexBlock(value: BigInt) {
    this.set("indexBlock", Value.fromBigInt(value));
  }
}
