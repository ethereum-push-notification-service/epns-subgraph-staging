// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddChannel extends ethereum.Event {
  get params(): AddChannel__Params {
    return new AddChannel__Params(this);
  }
}

export class AddChannel__Params {
  _event: AddChannel;

  constructor(event: AddChannel) {
    this._event = event;
  }

  get channel(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get channelType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get identity(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class DeactivateChannel extends ethereum.Event {
  get params(): DeactivateChannel__Params {
    return new DeactivateChannel__Params(this);
  }
}

export class DeactivateChannel__Params {
  _event: DeactivateChannel;

  constructor(event: DeactivateChannel) {
    this._event = event;
  }

  get channel(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Donation extends ethereum.Event {
  get params(): Donation__Params {
    return new Donation__Params(this);
  }
}

export class Donation__Params {
  _event: Donation;

  constructor(event: Donation) {
    this._event = event;
  }

  get donator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InterestClaimed extends ethereum.Event {
  get params(): InterestClaimed__Params {
    return new InterestClaimed__Params(this);
  }
}

export class InterestClaimed__Params {
  _event: InterestClaimed;

  constructor(event: InterestClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PublicKeyRegistered extends ethereum.Event {
  get params(): PublicKeyRegistered__Params {
    return new PublicKeyRegistered__Params(this);
  }
}

export class PublicKeyRegistered__Params {
  _event: PublicKeyRegistered;

  constructor(event: PublicKeyRegistered) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get publickey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class SendNotification extends ethereum.Event {
  get params(): SendNotification__Params {
    return new SendNotification__Params(this);
  }
}

export class SendNotification__Params {
  _event: SendNotification;

  constructor(event: SendNotification) {
    this._event = event;
  }

  get channel(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get identity(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Subscribe extends ethereum.Event {
  get params(): Subscribe__Params {
    return new Subscribe__Params(this);
  }
}

export class Subscribe__Params {
  _event: Subscribe;

  constructor(event: Subscribe) {
    this._event = event;
  }

  get channel(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Unsubscribe extends ethereum.Event {
  get params(): Unsubscribe__Params {
    return new Unsubscribe__Params(this);
  }
}

export class Unsubscribe__Params {
  _event: Unsubscribe;

  constructor(event: Unsubscribe) {
    this._event = event;
  }

  get channel(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateChannel extends ethereum.Event {
  get params(): UpdateChannel__Params {
    return new UpdateChannel__Params(this);
  }
}

export class UpdateChannel__Params {
  _event: UpdateChannel;

  constructor(event: UpdateChannel) {
    this._event = event;
  }

  get channel(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get identity(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EPNSCore__channelsResult {
  value0: i32;
  value1: boolean;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: i32,
    value1: boolean,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class EPNSCore__usersResult {
  value0: boolean;
  value1: boolean;
  value2: boolean;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: boolean,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class EPNSCore extends ethereum.SmartContract {
  static bind(address: Address): EPNSCore {
    return new EPNSCore("EPNSCore", address);
  }

  REFERRAL_CODE(): BigInt {
    let result = super.call("REFERRAL_CODE", "REFERRAL_CODE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_REFERRAL_CODE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REFERRAL_CODE",
      "REFERRAL_CODE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aDaiAddress(): Address {
    let result = super.call("aDaiAddress", "aDaiAddress():(address)", []);

    return result[0].toAddress();
  }

  try_aDaiAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("aDaiAddress", "aDaiAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calcAllChannelsRatio(_user: Address, _block: BigInt): BigInt {
    let result = super.call(
      "calcAllChannelsRatio",
      "calcAllChannelsRatio(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_block)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcAllChannelsRatio(
    _user: Address,
    _block: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcAllChannelsRatio",
      "calcAllChannelsRatio(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_block)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcSingleChannelEarnRatio(
    _channel: Address,
    _user: Address,
    _block: BigInt
  ): BigInt {
    let result = super.call(
      "calcSingleChannelEarnRatio",
      "calcSingleChannelEarnRatio(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_channel),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_block)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcSingleChannelEarnRatio(
    _channel: Address,
    _user: Address,
    _block: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcSingleChannelEarnRatio",
      "calcSingleChannelEarnRatio(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_channel),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_block)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  channels(param0: Address): EPNSCore__channelsResult {
    let result = super.call(
      "channels",
      "channels(address):(uint8,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new EPNSCore__channelsResult(
      result[0].toI32(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_channels(param0: Address): ethereum.CallResult<EPNSCore__channelsResult> {
    let result = super.tryCall(
      "channels",
      "channels(address):(uint8,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EPNSCore__channelsResult(
        value[0].toI32(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  channelsCount(): BigInt {
    let result = super.call("channelsCount", "channelsCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_channelsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "channelsCount",
      "channelsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimFairShare(): BigInt {
    let result = super.call("claimFairShare", "claimFairShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claimFairShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimFairShare",
      "claimFairShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  daiAddress(): Address {
    let result = super.call("daiAddress", "daiAddress():(address)", []);

    return result[0].toAddress();
  }

  try_daiAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("daiAddress", "daiAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getChannelFSRatio(_channel: Address, _block: BigInt): BigInt {
    let result = super.call(
      "getChannelFSRatio",
      "getChannelFSRatio(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_channel),
        ethereum.Value.fromUnsignedBigInt(_block)
      ]
    );

    return result[0].toBigInt();
  }

  try_getChannelFSRatio(
    _channel: Address,
    _block: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getChannelFSRatio",
      "getChannelFSRatio(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_channel),
        ethereum.Value.fromUnsignedBigInt(_block)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChannelSubscriberAddress(
    _channel: Address,
    _subscriberId: BigInt
  ): Address {
    let result = super.call(
      "getChannelSubscriberAddress",
      "getChannelSubscriberAddress(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_channel),
        ethereum.Value.fromUnsignedBigInt(_subscriberId)
      ]
    );

    return result[0].toAddress();
  }

  try_getChannelSubscriberAddress(
    _channel: Address,
    _subscriberId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getChannelSubscriberAddress",
      "getChannelSubscriberAddress(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_channel),
        ethereum.Value.fromUnsignedBigInt(_subscriberId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getChannelSubscriberUserID(_channel: Address, _subscriberId: BigInt): BigInt {
    let result = super.call(
      "getChannelSubscriberUserID",
      "getChannelSubscriberUserID(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_channel),
        ethereum.Value.fromUnsignedBigInt(_subscriberId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getChannelSubscriberUserID(
    _channel: Address,
    _subscriberId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getChannelSubscriberUserID",
      "getChannelSubscriberUserID(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_channel),
        ethereum.Value.fromUnsignedBigInt(_subscriberId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSubscriberFSRatio(
    _channel: Address,
    _user: Address,
    _block: BigInt
  ): BigInt {
    let result = super.call(
      "getSubscriberFSRatio",
      "getSubscriberFSRatio(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_channel),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_block)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSubscriberFSRatio(
    _channel: Address,
    _user: Address,
    _block: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSubscriberFSRatio",
      "getSubscriberFSRatio(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_channel),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_block)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWalletFromPublicKey(_publicKey: Bytes): Address {
    let result = super.call(
      "getWalletFromPublicKey",
      "getWalletFromPublicKey(bytes):(address)",
      [ethereum.Value.fromBytes(_publicKey)]
    );

    return result[0].toAddress();
  }

  try_getWalletFromPublicKey(_publicKey: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getWalletFromPublicKey",
      "getWalletFromPublicKey(bytes):(address)",
      [ethereum.Value.fromBytes(_publicKey)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  groupFairShareCount(): BigInt {
    let result = super.call(
      "groupFairShareCount",
      "groupFairShareCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_groupFairShareCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "groupFairShareCount",
      "groupFairShareCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  groupHistoricalZ(): BigInt {
    let result = super.call(
      "groupHistoricalZ",
      "groupHistoricalZ():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_groupHistoricalZ(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "groupHistoricalZ",
      "groupHistoricalZ():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  groupLastUpdate(): BigInt {
    let result = super.call(
      "groupLastUpdate",
      "groupLastUpdate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_groupLastUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "groupLastUpdate",
      "groupLastUpdate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  groupNormalizedWeight(): BigInt {
    let result = super.call(
      "groupNormalizedWeight",
      "groupNormalizedWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_groupNormalizedWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "groupNormalizedWeight",
      "groupNormalizedWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialize(
    _governance: Address,
    _lendingPoolProviderAddress: Address,
    _daiAddress: Address,
    _aDaiAddress: Address,
    _referralCode: BigInt
  ): boolean {
    let result = super.call(
      "initialize",
      "initialize(address,address,address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_governance),
        ethereum.Value.fromAddress(_lendingPoolProviderAddress),
        ethereum.Value.fromAddress(_daiAddress),
        ethereum.Value.fromAddress(_aDaiAddress),
        ethereum.Value.fromUnsignedBigInt(_referralCode)
      ]
    );

    return result[0].toBoolean();
  }

  try_initialize(
    _governance: Address,
    _lendingPoolProviderAddress: Address,
    _daiAddress: Address,
    _aDaiAddress: Address,
    _referralCode: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "initialize",
      "initialize(address,address,address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_governance),
        ethereum.Value.fromAddress(_lendingPoolProviderAddress),
        ethereum.Value.fromAddress(_daiAddress),
        ethereum.Value.fromAddress(_aDaiAddress),
        ethereum.Value.fromUnsignedBigInt(_referralCode)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lendingPoolProviderAddress(): Address {
    let result = super.call(
      "lendingPoolProviderAddress",
      "lendingPoolProviderAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_lendingPoolProviderAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lendingPoolProviderAddress",
      "lendingPoolProviderAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mapAddressChannels(param0: BigInt): Address {
    let result = super.call(
      "mapAddressChannels",
      "mapAddressChannels(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_mapAddressChannels(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "mapAddressChannels",
      "mapAddressChannels(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mapAddressUsers(param0: BigInt): Address {
    let result = super.call(
      "mapAddressUsers",
      "mapAddressUsers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_mapAddressUsers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "mapAddressUsers",
      "mapAddressUsers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  memberExists(_user: Address, _channel: Address): boolean {
    let result = super.call(
      "memberExists",
      "memberExists(address,address):(bool)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_channel)]
    );

    return result[0].toBoolean();
  }

  try_memberExists(
    _user: Address,
    _channel: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "memberExists",
      "memberExists(address,address):(bool)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_channel)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ownerDaiFunds(): BigInt {
    let result = super.call("ownerDaiFunds", "ownerDaiFunds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ownerDaiFunds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownerDaiFunds",
      "ownerDaiFunds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolFunds(): BigInt {
    let result = super.call("poolFunds", "poolFunds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolFunds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolFunds", "poolFunds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unsubscribe(_channel: Address): BigInt {
    let result = super.call("unsubscribe", "unsubscribe(address):(uint256)", [
      ethereum.Value.fromAddress(_channel)
    ]);

    return result[0].toBigInt();
  }

  try_unsubscribe(_channel: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unsubscribe",
      "unsubscribe(address):(uint256)",
      [ethereum.Value.fromAddress(_channel)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  users(param0: Address): EPNSCore__usersResult {
    let result = super.call(
      "users",
      "users(address):(bool,bool,bool,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new EPNSCore__usersResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBoolean(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_users(param0: Address): ethereum.CallResult<EPNSCore__usersResult> {
    let result = super.tryCall(
      "users",
      "users(address):(bool,bool,bool,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EPNSCore__usersResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBoolean(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  usersCount(): BigInt {
    let result = super.call("usersCount", "usersCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_usersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("usersCount", "usersCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usersInterestClaimed(param0: Address): BigInt {
    let result = super.call(
      "usersInterestClaimed",
      "usersInterestClaimed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_usersInterestClaimed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "usersInterestClaimed",
      "usersInterestClaimed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usersInterestInWallet(param0: Address): BigInt {
    let result = super.call(
      "usersInterestInWallet",
      "usersInterestInWallet(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_usersInterestInWallet(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "usersInterestInWallet",
      "usersInterestInWallet(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddToChannelizationWhitelistCall extends ethereum.Call {
  get inputs(): AddToChannelizationWhitelistCall__Inputs {
    return new AddToChannelizationWhitelistCall__Inputs(this);
  }

  get outputs(): AddToChannelizationWhitelistCall__Outputs {
    return new AddToChannelizationWhitelistCall__Outputs(this);
  }
}

export class AddToChannelizationWhitelistCall__Inputs {
  _call: AddToChannelizationWhitelistCall;

  constructor(call: AddToChannelizationWhitelistCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddToChannelizationWhitelistCall__Outputs {
  _call: AddToChannelizationWhitelistCall;

  constructor(call: AddToChannelizationWhitelistCall) {
    this._call = call;
  }
}

export class BroadcastUserPublicKeyCall extends ethereum.Call {
  get inputs(): BroadcastUserPublicKeyCall__Inputs {
    return new BroadcastUserPublicKeyCall__Inputs(this);
  }

  get outputs(): BroadcastUserPublicKeyCall__Outputs {
    return new BroadcastUserPublicKeyCall__Outputs(this);
  }
}

export class BroadcastUserPublicKeyCall__Inputs {
  _call: BroadcastUserPublicKeyCall;

  constructor(call: BroadcastUserPublicKeyCall) {
    this._call = call;
  }

  get _publicKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class BroadcastUserPublicKeyCall__Outputs {
  _call: BroadcastUserPublicKeyCall;

  constructor(call: BroadcastUserPublicKeyCall) {
    this._call = call;
  }
}

export class ClaimFairShareCall extends ethereum.Call {
  get inputs(): ClaimFairShareCall__Inputs {
    return new ClaimFairShareCall__Inputs(this);
  }

  get outputs(): ClaimFairShareCall__Outputs {
    return new ClaimFairShareCall__Outputs(this);
  }
}

export class ClaimFairShareCall__Inputs {
  _call: ClaimFairShareCall;

  constructor(call: ClaimFairShareCall) {
    this._call = call;
  }
}

export class ClaimFairShareCall__Outputs {
  _call: ClaimFairShareCall;

  constructor(call: ClaimFairShareCall) {
    this._call = call;
  }

  get ratio(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateChannelWithFeesCall extends ethereum.Call {
  get inputs(): CreateChannelWithFeesCall__Inputs {
    return new CreateChannelWithFeesCall__Inputs(this);
  }

  get outputs(): CreateChannelWithFeesCall__Outputs {
    return new CreateChannelWithFeesCall__Outputs(this);
  }
}

export class CreateChannelWithFeesCall__Inputs {
  _call: CreateChannelWithFeesCall;

  constructor(call: CreateChannelWithFeesCall) {
    this._call = call;
  }

  get _channelType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _identity(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CreateChannelWithFeesCall__Outputs {
  _call: CreateChannelWithFeesCall;

  constructor(call: CreateChannelWithFeesCall) {
    this._call = call;
  }
}

export class CreateChannelWithFeesAndPublicKeyCall extends ethereum.Call {
  get inputs(): CreateChannelWithFeesAndPublicKeyCall__Inputs {
    return new CreateChannelWithFeesAndPublicKeyCall__Inputs(this);
  }

  get outputs(): CreateChannelWithFeesAndPublicKeyCall__Outputs {
    return new CreateChannelWithFeesAndPublicKeyCall__Outputs(this);
  }
}

export class CreateChannelWithFeesAndPublicKeyCall__Inputs {
  _call: CreateChannelWithFeesAndPublicKeyCall;

  constructor(call: CreateChannelWithFeesAndPublicKeyCall) {
    this._call = call;
  }

  get _channelType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _identity(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _publickey(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class CreateChannelWithFeesAndPublicKeyCall__Outputs {
  _call: CreateChannelWithFeesAndPublicKeyCall;

  constructor(call: CreateChannelWithFeesAndPublicKeyCall) {
    this._call = call;
  }
}

export class CreatePromoterChannelCall extends ethereum.Call {
  get inputs(): CreatePromoterChannelCall__Inputs {
    return new CreatePromoterChannelCall__Inputs(this);
  }

  get outputs(): CreatePromoterChannelCall__Outputs {
    return new CreatePromoterChannelCall__Outputs(this);
  }
}

export class CreatePromoterChannelCall__Inputs {
  _call: CreatePromoterChannelCall;

  constructor(call: CreatePromoterChannelCall) {
    this._call = call;
  }
}

export class CreatePromoterChannelCall__Outputs {
  _call: CreatePromoterChannelCall;

  constructor(call: CreatePromoterChannelCall) {
    this._call = call;
  }
}

export class DeactivateChannelCall extends ethereum.Call {
  get inputs(): DeactivateChannelCall__Inputs {
    return new DeactivateChannelCall__Inputs(this);
  }

  get outputs(): DeactivateChannelCall__Outputs {
    return new DeactivateChannelCall__Outputs(this);
  }
}

export class DeactivateChannelCall__Inputs {
  _call: DeactivateChannelCall;

  constructor(call: DeactivateChannelCall) {
    this._call = call;
  }
}

export class DeactivateChannelCall__Outputs {
  _call: DeactivateChannelCall;

  constructor(call: DeactivateChannelCall) {
    this._call = call;
  }
}

export class DonateCall extends ethereum.Call {
  get inputs(): DonateCall__Inputs {
    return new DonateCall__Inputs(this);
  }

  get outputs(): DonateCall__Outputs {
    return new DonateCall__Outputs(this);
  }
}

export class DonateCall__Inputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }
}

export class DonateCall__Outputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _lendingPoolProviderAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _daiAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _aDaiAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _referralCode(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveFromChannelizationWhitelistCall extends ethereum.Call {
  get inputs(): RemoveFromChannelizationWhitelistCall__Inputs {
    return new RemoveFromChannelizationWhitelistCall__Inputs(this);
  }

  get outputs(): RemoveFromChannelizationWhitelistCall__Outputs {
    return new RemoveFromChannelizationWhitelistCall__Outputs(this);
  }
}

export class RemoveFromChannelizationWhitelistCall__Inputs {
  _call: RemoveFromChannelizationWhitelistCall;

  constructor(call: RemoveFromChannelizationWhitelistCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFromChannelizationWhitelistCall__Outputs {
  _call: RemoveFromChannelizationWhitelistCall;

  constructor(call: RemoveFromChannelizationWhitelistCall) {
    this._call = call;
  }
}

export class SendNotificationCall extends ethereum.Call {
  get inputs(): SendNotificationCall__Inputs {
    return new SendNotificationCall__Inputs(this);
  }

  get outputs(): SendNotificationCall__Outputs {
    return new SendNotificationCall__Outputs(this);
  }
}

export class SendNotificationCall__Inputs {
  _call: SendNotificationCall;

  constructor(call: SendNotificationCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _identity(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SendNotificationCall__Outputs {
  _call: SendNotificationCall;

  constructor(call: SendNotificationCall) {
    this._call = call;
  }
}

export class SendNotificationOverrideChannelCall extends ethereum.Call {
  get inputs(): SendNotificationOverrideChannelCall__Inputs {
    return new SendNotificationOverrideChannelCall__Inputs(this);
  }

  get outputs(): SendNotificationOverrideChannelCall__Outputs {
    return new SendNotificationOverrideChannelCall__Outputs(this);
  }
}

export class SendNotificationOverrideChannelCall__Inputs {
  _call: SendNotificationOverrideChannelCall;

  constructor(call: SendNotificationOverrideChannelCall) {
    this._call = call;
  }

  get _channel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _identity(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SendNotificationOverrideChannelCall__Outputs {
  _call: SendNotificationOverrideChannelCall;

  constructor(call: SendNotificationOverrideChannelCall) {
    this._call = call;
  }
}

export class SubscribeCall extends ethereum.Call {
  get inputs(): SubscribeCall__Inputs {
    return new SubscribeCall__Inputs(this);
  }

  get outputs(): SubscribeCall__Outputs {
    return new SubscribeCall__Outputs(this);
  }
}

export class SubscribeCall__Inputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }

  get _channel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SubscribeCall__Outputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }
}

export class SubscribeDelegatedCall extends ethereum.Call {
  get inputs(): SubscribeDelegatedCall__Inputs {
    return new SubscribeDelegatedCall__Inputs(this);
  }

  get outputs(): SubscribeDelegatedCall__Outputs {
    return new SubscribeDelegatedCall__Outputs(this);
  }
}

export class SubscribeDelegatedCall__Inputs {
  _call: SubscribeDelegatedCall;

  constructor(call: SubscribeDelegatedCall) {
    this._call = call;
  }

  get _channel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SubscribeDelegatedCall__Outputs {
  _call: SubscribeDelegatedCall;

  constructor(call: SubscribeDelegatedCall) {
    this._call = call;
  }
}

export class SubscribeWithPublicKeyCall extends ethereum.Call {
  get inputs(): SubscribeWithPublicKeyCall__Inputs {
    return new SubscribeWithPublicKeyCall__Inputs(this);
  }

  get outputs(): SubscribeWithPublicKeyCall__Outputs {
    return new SubscribeWithPublicKeyCall__Outputs(this);
  }
}

export class SubscribeWithPublicKeyCall__Inputs {
  _call: SubscribeWithPublicKeyCall;

  constructor(call: SubscribeWithPublicKeyCall) {
    this._call = call;
  }

  get _channel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _publicKey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SubscribeWithPublicKeyCall__Outputs {
  _call: SubscribeWithPublicKeyCall;

  constructor(call: SubscribeWithPublicKeyCall) {
    this._call = call;
  }
}

export class SubscribeWithPublicKeyDelegatedCall extends ethereum.Call {
  get inputs(): SubscribeWithPublicKeyDelegatedCall__Inputs {
    return new SubscribeWithPublicKeyDelegatedCall__Inputs(this);
  }

  get outputs(): SubscribeWithPublicKeyDelegatedCall__Outputs {
    return new SubscribeWithPublicKeyDelegatedCall__Outputs(this);
  }
}

export class SubscribeWithPublicKeyDelegatedCall__Inputs {
  _call: SubscribeWithPublicKeyDelegatedCall;

  constructor(call: SubscribeWithPublicKeyDelegatedCall) {
    this._call = call;
  }

  get _channel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _publicKey(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SubscribeWithPublicKeyDelegatedCall__Outputs {
  _call: SubscribeWithPublicKeyDelegatedCall;

  constructor(call: SubscribeWithPublicKeyDelegatedCall) {
    this._call = call;
  }
}

export class TransferGovernanceCall extends ethereum.Call {
  get inputs(): TransferGovernanceCall__Inputs {
    return new TransferGovernanceCall__Inputs(this);
  }

  get outputs(): TransferGovernanceCall__Outputs {
    return new TransferGovernanceCall__Outputs(this);
  }
}

export class TransferGovernanceCall__Inputs {
  _call: TransferGovernanceCall;

  constructor(call: TransferGovernanceCall) {
    this._call = call;
  }

  get _newGovernance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferGovernanceCall__Outputs {
  _call: TransferGovernanceCall;

  constructor(call: TransferGovernanceCall) {
    this._call = call;
  }
}

export class UnsubscribeCall extends ethereum.Call {
  get inputs(): UnsubscribeCall__Inputs {
    return new UnsubscribeCall__Inputs(this);
  }

  get outputs(): UnsubscribeCall__Outputs {
    return new UnsubscribeCall__Outputs(this);
  }
}

export class UnsubscribeCall__Inputs {
  _call: UnsubscribeCall;

  constructor(call: UnsubscribeCall) {
    this._call = call;
  }

  get _channel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnsubscribeCall__Outputs {
  _call: UnsubscribeCall;

  constructor(call: UnsubscribeCall) {
    this._call = call;
  }

  get ratio(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateChannelMetaCall extends ethereum.Call {
  get inputs(): UpdateChannelMetaCall__Inputs {
    return new UpdateChannelMetaCall__Inputs(this);
  }

  get outputs(): UpdateChannelMetaCall__Outputs {
    return new UpdateChannelMetaCall__Outputs(this);
  }
}

export class UpdateChannelMetaCall__Inputs {
  _call: UpdateChannelMetaCall;

  constructor(call: UpdateChannelMetaCall) {
    this._call = call;
  }

  get _channel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _identity(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpdateChannelMetaCall__Outputs {
  _call: UpdateChannelMetaCall;

  constructor(call: UpdateChannelMetaCall) {
    this._call = call;
  }
}

export class WithdrawDaiFundsCall extends ethereum.Call {
  get inputs(): WithdrawDaiFundsCall__Inputs {
    return new WithdrawDaiFundsCall__Inputs(this);
  }

  get outputs(): WithdrawDaiFundsCall__Outputs {
    return new WithdrawDaiFundsCall__Outputs(this);
  }
}

export class WithdrawDaiFundsCall__Inputs {
  _call: WithdrawDaiFundsCall;

  constructor(call: WithdrawDaiFundsCall) {
    this._call = call;
  }
}

export class WithdrawDaiFundsCall__Outputs {
  _call: WithdrawDaiFundsCall;

  constructor(call: WithdrawDaiFundsCall) {
    this._call = call;
  }
}

export class WithdrawEthFundsCall extends ethereum.Call {
  get inputs(): WithdrawEthFundsCall__Inputs {
    return new WithdrawEthFundsCall__Inputs(this);
  }

  get outputs(): WithdrawEthFundsCall__Outputs {
    return new WithdrawEthFundsCall__Outputs(this);
  }
}

export class WithdrawEthFundsCall__Inputs {
  _call: WithdrawEthFundsCall;

  constructor(call: WithdrawEthFundsCall) {
    this._call = call;
  }
}

export class WithdrawEthFundsCall__Outputs {
  _call: WithdrawEthFundsCall;

  constructor(call: WithdrawEthFundsCall) {
    this._call = call;
  }
}
